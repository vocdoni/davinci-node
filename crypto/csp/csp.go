// csp package provides the basic methods to create and verify census proofs
// from a third-party services, a Census Service Provider (CSP). This package
// includes the definition of the CSP interface and a general functions to
// create a new CSP based on the given origin of the census and verify the
// census proofs generated by the CSP.
//
// The CSP interface defines methods to set a seed, retrieve census origin and
// root, generate and verify census proofs. The package currently supports the
// EdDSA BLS12-377 origin for census proofs.
//
//   - The `New` function creates a new CSP based on the provided origin and
//     seed.
//   - The `VerifyCensusProof` function verifies a given CensusProof using the
//     appropriate CSP based on its origin.
package csp

import (
	"fmt"

	"github.com/consensys/gnark-crypto/ecc/twistededwards"
	"github.com/ethereum/go-ethereum/common"
	"github.com/vocdoni/davinci-node/crypto/csp/eddsa"
	"github.com/vocdoni/davinci-node/types"
)

// CSP defines the interface for a Census Service Provider (CSP). It provides
// methods to set a seed, retrieve census origin and root, and generate and
// verify census proofs. The CSP is responsible for handling cryptographic
// operations related to census proofs, which are used to verify the integrity
// and authenticity of census data in an external system.
type CSP interface {
	SetSeed(seed []byte) error
	CensusOrigin() types.CensusOrigin
	CensusRoot() types.HexBytes
	GenerateProof(processID *types.ProcessID, address common.Address) (*types.CensusProof, error)
	VerifyProof(proof *types.CensusProof) error
}

// New creates a new CensusServiceProvider (CSP) based on the given origin.
// If a seed is provided, it initializes the CSP with that seed. It returns
// an error if the CSP cannot be created for the given origin or if the seed
// cannot be set.
func New(origin types.CensusOrigin, seed []byte) (CSP, error) {
	// Create a new CSP based on the origin
	var csp CSP
	switch origin {
	case types.CensusOriginCSPEdDSABLS12377:
		var err error
		if csp, err = eddsa.New(twistededwards.BLS12_377); err != nil {
			return nil, fmt.Errorf("failed to create EdDSA CSP: %w", err)
		}
	default:
		return nil, fmt.Errorf("unsupported census origin: %s", origin)
	}
	// If a seed is provided, set it for the CSP
	if len(seed) > 0 {
		if err := csp.SetSeed(seed); err != nil {
			return nil, fmt.Errorf("failed to set seed for EdDSA CSP: %w", err)
		}
	}
	return csp, nil
}

// VerifyCensusProof verifies the given CensusProof using the appropriate CSP.
// It checks the origin of the proof and uses the corresponding CSP to verify
// it. If the origin is not supported, it returns an error.
func VerifyCensusProof(proof *types.CensusProof) error {
	var csp CSP
	switch proof.CensusOrigin {
	case types.CensusOriginCSPEdDSABLS12377:
		var err error
		csp, err = eddsa.New(twistededwards.BLS12_377)
		if err != nil {
			return fmt.Errorf("failed to create EdDSA CSP: %w", err)
		}
	default:
		return fmt.Errorf("unsupported census origin: %s", proof.CensusOrigin)
	}
	return csp.VerifyProof(proof)
}
