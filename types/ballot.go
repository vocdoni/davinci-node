package types

import (
	"math/big"

	gecc "github.com/consensys/gnark-crypto/ecc"
	ethcrypto "github.com/ethereum/go-ethereum/crypto"
	"github.com/vocdoni/vocdoni-z-sandbox/crypto"
)

// BallotSignature is the signature generated by a voter to sign the ballot as
// a proof of the authorship of the vote.
type BallotSignature struct {
	R HexBytes `json:"r"`
	S HexBytes `json:"s"`
}

// Bin returns the bytes of the binary representation of the signature, which
// is build by appending the R and S values as byte slices.
func (sig *BallotSignature) Bin() []byte {
	return append(sig.R, sig.S...)
}

// Verify checks if the signature is valid for the given input and public key.
// The public key should be an ecdsa public key compressed in bytes. The input
// should be a big integer that will be converted in a byte slice ensuring that
// the final value is in the expected scalar field (BLS12_377) and has the
// expected size.
func (sig *BallotSignature) Verify(input *big.Int, pubKey []byte) bool {
	ffInput := crypto.SignatureHash(input, gecc.BLS12_377.ScalarField())
	return ethcrypto.VerifySignature(pubKey, ffInput, sig.Bin())
}
